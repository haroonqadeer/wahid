{"remainingRequest":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\ngx-modal-dialog\\src\\modal-dialog.component.js","dependencies":[{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\ngx-modal-dialog\\src\\modal-dialog.component.js","mtime":1528883083000},{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539413788549},{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Component, ComponentFactoryResolver, ViewContainerRef, ViewChild, HostListener, ElementRef } from '@angular/core';\nimport { Subject, from } from 'rxjs';\n/**\n * Modal dialog component\n */\nvar ModalDialogComponent = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * CTOR\n     * @param _element\n     * @param componentFactoryResolver\n     */\n    function ModalDialogComponent(_element, componentFactoryResolver) {\n        this._element = _element;\n        this.componentFactoryResolver = componentFactoryResolver;\n        /** Modal dialog style settings */\n        this.settings = {\n            overlayClass: 'modal-backdrop fade',\n            overlayAnimationTriggerClass: 'show',\n            modalClass: 'modal ngx-modal fade',\n            modalAnimationTriggerClass: 'show',\n            modalDialogClass: 'modal-dialog modal-dialog-centered',\n            contentClass: 'modal-content',\n            headerClass: 'modal-header',\n            headerTitleClass: 'modal-title',\n            closeButtonClass: 'close glyphicon glyphicon-remove',\n            closeButtonTitle: 'CLOSE',\n            bodyClass: 'modal-body',\n            footerClass: 'modal-footer',\n            alertClass: 'ngx-modal-shake',\n            alertDuration: 250,\n            notifyWithAlert: true,\n            buttonClass: 'btn btn-primary'\n        };\n        this.showAlert = false;\n        this.animateOverlayClass = '';\n        this.animateModalClass = '';\n        this.showOverlay = false;\n        this._inProgress = false;\n    }\n    ModalDialogComponent.prototype.onClick = function (event) {\n        if (event.target !== this.dialogElement.nativeElement) {\n            return;\n        }\n        this.close();\n    };\n    /**\n     * Initialize dialog with reference to instance and options\n     * @param reference\n     * @param options\n     */\n    ModalDialogComponent.prototype.dialogInit = function (reference, options) {\n        var _this = this;\n        if (options === void 0) {\n            options = {};\n        }\n        this.reference = reference;\n        // inject component\n        if (options.childComponent) {\n            var factory = this.componentFactoryResolver.resolveComponentFactory(options.childComponent);\n            var componentRef = this.dynamicComponentTarget.createComponent(factory);\n            this._childInstance = componentRef.instance;\n            this._closeDialog$ = new Subject();\n            this._closeDialog$.subscribe(function () {\n                _this._finalizeAndDestroy();\n            });\n            options.closeDialogSubject = this._closeDialog$;\n            this._childInstance['dialogInit'](componentRef, options);\n            document.activeElement != null ?\n                document.activeElement.blur() :\n                document.body.blur();\n        }\n        // set options\n        this._setOptions(options);\n    };\n    ModalDialogComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // a trick to defer css animations\n        setTimeout(function () {\n            _this.animateOverlayClass = _this.settings.overlayAnimationTriggerClass;\n            _this.animateModalClass = _this.settings.modalAnimationTriggerClass;\n        }, 0);\n    };\n    /**\n     * Cleanup on destroy\n     */\n    ModalDialogComponent.prototype.ngOnDestroy = function () {\n        // run animations\n        this.animateOverlayClass = '';\n        this.animateModalClass = '';\n        // cleanup listeners\n        if (this._alertTimeout) {\n            clearTimeout(this._alertTimeout);\n            this._alertTimeout = null;\n        }\n        if (this._closeDialog$) {\n            this._closeDialog$.unsubscribe();\n        }\n    };\n    /**\n     * Run action defined on action button\n     * @param action\n     */\n    ModalDialogComponent.prototype.doAction = function (action) {\n        // disable multi clicks\n        if (this._inProgress) {\n            return;\n        }\n        this._inProgress = true;\n        this._closeIfSuccessful(action);\n    };\n    /**\n     * Method to run on close\n     * if action buttons are defined, it will not close\n     */\n    ModalDialogComponent.prototype.close = function () {\n        if (this._inProgress) {\n            return;\n        }\n        if (this.actionButtons && this.actionButtons.length) {\n            return;\n        }\n        this._inProgress = true;\n        if (this.onClose) {\n            this._closeIfSuccessful(this.onClose);\n            return;\n        }\n        this._finalizeAndDestroy();\n    };\n    /**\n     * Pass options from dialog setup to component\n     * @param  {IModalDialogOptions} options?\n     */\n    ModalDialogComponent.prototype._setOptions = function (options) {\n        if (options.onClose && options.actionButtons && options.actionButtons.length) {\n            throw new Error(\"OnClose callback and ActionButtons are not allowed to be defined on the same dialog.\");\n        }\n        // set references\n        this.title = (options && options.title) || '';\n        this.onClose = (options && options.onClose) || null;\n        this.actionButtons = (this._childInstance && this._childInstance['actionButtons']) ||\n            (options && options.actionButtons) || null;\n        if (options && options.settings) {\n            Object.assign(this.settings, options.settings);\n        }\n    };\n    /**\n     * Close if successful\n     * @param callback\n     */\n    ModalDialogComponent.prototype._closeIfSuccessful = function (callback) {\n        var _this = this;\n        if (!callback) {\n            return this._finalizeAndDestroy();\n        }\n        var response = callback();\n        if (typeof response === 'boolean') {\n            if (response) {\n                return this._finalizeAndDestroy();\n            }\n            return this._triggerAlert();\n        }\n        if (this.isPromise(response)) {\n            response = from(response);\n        }\n        if (this.isObservable(response)) {\n            response.subscribe(function () {\n                _this._finalizeAndDestroy();\n            }, function () {\n                _this._triggerAlert();\n            });\n        }\n        else {\n            this._inProgress = false;\n        }\n    };\n    ModalDialogComponent.prototype._finalizeAndDestroy = function () {\n        this._inProgress = false;\n        this.reference.destroy();\n    };\n    ModalDialogComponent.prototype._triggerAlert = function () {\n        var _this = this;\n        if (this.settings.notifyWithAlert) {\n            this.showAlert = true;\n            this._alertTimeout = window.setTimeout(function () {\n                _this.showAlert = false;\n                _this._inProgress = false;\n                clearTimeout(_this._alertTimeout);\n                _this._alertTimeout = null;\n            }, this.settings.alertDuration);\n        }\n    };\n    ModalDialogComponent.prototype.isPromise = function (value) {\n        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n    };\n    ModalDialogComponent.prototype.isObservable = function (value) {\n        return value && typeof value.subscribe === 'function';\n    };\n    return ModalDialogComponent;\n}());\nexport { ModalDialogComponent };\n",null]}