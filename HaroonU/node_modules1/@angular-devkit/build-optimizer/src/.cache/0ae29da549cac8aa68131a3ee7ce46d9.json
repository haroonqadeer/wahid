{"remainingRequest":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\ngx-modal-dialog\\src\\modal-dialog.module.js","dependencies":[{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\ngx-modal-dialog\\src\\modal-dialog.module.js","mtime":1528883083000},{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539413788549},{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["// components and directives\nimport { ModalDialogComponent } from './modal-dialog.component';\nimport { ModalDialogService } from './modal-dialog.service';\nimport { SimpleModalComponent } from './simple-modal.component';\nimport { ModalDialogInstanceService } from './modal-dialog-instance.service';\n// modules\nimport { CommonModule } from '@angular/common';\nimport { NgModule, InjectionToken, SkipSelf, Optional } from '@angular/core';\n/**\n * Guard to make sure we have single initialization of forRoot\n * @type {InjectionToken<ModalDialogModule>}\n */\nexport var MODAL_DIALOG_FORROOT_GUARD = new InjectionToken('MODAL_DIALOG_FORROOT_GUARD');\nvar ModalDialogModule = /** @class */ /*@__PURE__*/ (function () {\n    function ModalDialogModule() {\n    }\n    ModalDialogModule.forRoot = function () {\n        return {\n            ngModule: ModalDialogModule,\n            providers: [\n                {\n                    provide: MODAL_DIALOG_FORROOT_GUARD,\n                    useFactory: provideForRootGuard,\n                    deps: [[ModalDialogModule, new Optional(), new SkipSelf()]]\n                },\n                ModalDialogInstanceService\n            ]\n        };\n    };\n    return ModalDialogModule;\n}());\nexport { ModalDialogModule };\n/**\n * @param dialogModule\n * @returns {string}\n */\nexport function provideForRootGuard(dialogModule) {\n    if (dialogModule) {\n        throw new Error(\"ModalDialogModule.forRoot() called twice.\");\n    }\n    return 'guarded';\n}\n",null]}