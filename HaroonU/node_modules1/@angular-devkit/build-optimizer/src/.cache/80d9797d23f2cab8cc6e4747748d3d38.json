{"remainingRequest":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\angular-highcharts\\angular-highcharts.es5.js","dependencies":[{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\angular-highcharts\\angular-highcharts.es5.js","mtime":499162500000},{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539413788549},{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import * as Highcharts from 'highcharts';\nimport { chart, stockChart, mapChart } from 'highcharts';\nexport { Highcharts };\nimport { AsyncSubject } from 'rxjs';\nimport { Directive, ElementRef, Input, Inject, Injectable, InjectionToken, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Chart = /** @class */ /*@__PURE__*/ (function () {\n    function Chart(options) {\n        if (options === void 0) {\n            options = { series: [] };\n        }\n        this.options = options;\n        this.refSubject = new AsyncSubject();\n        this.ref$ = this.refSubject.asObservable();\n    }\n    /**\n     * Add Point\n     * @param point         Highcharts.DataPoint, number touple or number\n     * @param serieIndex    Index position of series. This defaults to 0.\n     * @param redraw        Flag whether or not to redraw point. This defaults to true.\n     * @param shift         Shift point to the start of series. This defaults to false.\n     * @memberof Chart\n     */\n    /**\n     * Add Point\n     * \\@memberof Chart\n     * @param {?} point         Highcharts.DataPoint, number touple or number\n     * @param {?=} serieIndex    Index position of series. This defaults to 0.\n     * @param {?=} redraw        Flag whether or not to redraw point. This defaults to true.\n     * @param {?=} shift         Shift point to the start of series. This defaults to false.\n     * @return {?}\n     */\n    Chart.prototype.addPoint = /**\n     * Add Point\n     * \\@memberof Chart\n     * @param {?} point         Highcharts.DataPoint, number touple or number\n     * @param {?=} serieIndex    Index position of series. This defaults to 0.\n     * @param {?=} redraw        Flag whether or not to redraw point. This defaults to true.\n     * @param {?=} shift         Shift point to the start of series. This defaults to false.\n     * @return {?}\n     */\n        function (point, serieIndex, redraw, shift) {\n            if (serieIndex === void 0) {\n                serieIndex = 0;\n            }\n            if (redraw === void 0) {\n                redraw = true;\n            }\n            if (shift === void 0) {\n                shift = false;\n            }\n            this.ref$.subscribe(function (chart$$1) {\n                if (chart$$1.series.length > serieIndex) {\n                    chart$$1.series[serieIndex].addPoint(point, redraw, shift);\n                }\n            });\n        };\n    /**\n     * Add Series\n     * @param serie         Series Configuration\n     * @param redraw        Flag whether or not to redraw series. This defaults to true.\n     * @param animation     Whether to apply animation, and optionally animation configuration. This defaults to false.\n     * @memberof Chart\n     */\n    /**\n     * Add Series\n     * \\@memberof Chart\n     * @param {?} serie         Series Configuration\n     * @param {?=} redraw        Flag whether or not to redraw series. This defaults to true.\n     * @param {?=} animation     Whether to apply animation, and optionally animation configuration. This defaults to false.\n     * @return {?}\n     */\n    Chart.prototype.addSerie = /**\n     * Add Series\n     * \\@memberof Chart\n     * @param {?} serie         Series Configuration\n     * @param {?=} redraw        Flag whether or not to redraw series. This defaults to true.\n     * @param {?=} animation     Whether to apply animation, and optionally animation configuration. This defaults to false.\n     * @return {?}\n     */\n        function (serie, redraw, animation) {\n            if (redraw === void 0) {\n                redraw = true;\n            }\n            if (animation === void 0) {\n                animation = false;\n            }\n            this.ref$.subscribe(function (chart$$1) {\n                chart$$1.addSeries(serie, redraw, animation);\n            });\n        };\n    /**\n     * Remove Point\n     * @param pointIndex    Index of Point\n     * @param serieIndex    Specified Index of Series. Defaults to 0.\n     * @memberof Chart\n     */\n    /**\n     * Remove Point\n     * \\@memberof Chart\n     * @param {?} pointIndex    Index of Point\n     * @param {?=} serieIndex    Specified Index of Series. Defaults to 0.\n     * @return {?}\n     */\n    Chart.prototype.removePoint = /**\n     * Remove Point\n     * \\@memberof Chart\n     * @param {?} pointIndex    Index of Point\n     * @param {?=} serieIndex    Specified Index of Series. Defaults to 0.\n     * @return {?}\n     */\n        function (pointIndex, serieIndex) {\n            if (serieIndex === void 0) {\n                serieIndex = 0;\n            }\n            this.ref$.subscribe(function (chart$$1) {\n                if (chart$$1.series.length > serieIndex && chart$$1.series[serieIndex].data.length > pointIndex) {\n                    chart$$1.series[serieIndex].removePoint(pointIndex, true);\n                }\n            });\n        };\n    /**\n     * Remove Series\n     * @param serieIndex    Index position of series to remove.\n     * @memberof Chart\n     */\n    /**\n     * Remove Series\n     * \\@memberof Chart\n     * @param {?} serieIndex    Index position of series to remove.\n     * @return {?}\n     */\n    Chart.prototype.removeSerie = /**\n     * Remove Series\n     * \\@memberof Chart\n     * @param {?} serieIndex    Index position of series to remove.\n     * @return {?}\n     */\n        function (serieIndex) {\n            this.ref$.subscribe(function (chart$$1) {\n                if (chart$$1.series.length > serieIndex) {\n                    chart$$1.series[serieIndex].remove(true);\n                }\n            });\n        };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    Chart.prototype.init = /**\n     * @param {?} el\n     * @return {?}\n     */\n        function (el) {\n            var _this = this;\n            chart(el.nativeElement, this.options, function (chart$$1) {\n                _this.refSubject.next(chart$$1);\n                _this.ref = chart$$1;\n                _this.refSubject.complete();\n            });\n        };\n    /**\n     * @return {?}\n     */\n    Chart.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.ref) {\n                this.options = this.ref.options;\n                this.ref.destroy();\n                this.ref = undefined;\n                // new init subject\n                this.refSubject = new AsyncSubject();\n                this.ref$ = this.refSubject.asObservable();\n            }\n        };\n    return Chart;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\nvar /**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */ MapChart = /** @class */ /*@__PURE__*/ (function () {\n    function MapChart(options) {\n        this.options = options;\n        this.refSubject = new AsyncSubject();\n        this.ref$ = this.refSubject.asObservable();\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    MapChart.prototype.init = /**\n     * @param {?} el\n     * @return {?}\n     */\n        function (el) {\n            var _this = this;\n            mapChart(el.nativeElement, this.options, function (chart$$1) {\n                _this.refSubject.next(chart$$1);\n                _this.ref = chart$$1;\n                _this.refSubject.complete();\n            });\n        };\n    /**\n     * @return {?}\n     */\n    MapChart.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.ref) {\n                this.options = this.ref.options;\n                this.ref.destroy();\n                this.ref = undefined;\n                // new init subject\n                this.refSubject = new AsyncSubject();\n                this.ref$ = this.refSubject.asObservable();\n            }\n        };\n    return MapChart;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n *\n * @author Felix Itzenplitz\n * @author Timothy A. Perez (contributor)\n */\nvar /**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n *\n * @author Felix Itzenplitz\n * @author Timothy A. Perez (contributor)\n */ StockChart = /** @class */ /*@__PURE__*/ (function () {\n    function StockChart(options) {\n        if (options === void 0) {\n            options = { series: [] };\n        }\n        this.options = options;\n        this.refSubject = new AsyncSubject();\n        this.ref$ = this.refSubject.asObservable();\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    StockChart.prototype.init = /**\n     * @param {?} el\n     * @return {?}\n     */\n        function (el) {\n            var _this = this;\n            stockChart(el.nativeElement, this.options, function (chart$$1) {\n                _this.refSubject.next(chart$$1);\n                _this.ref = chart$$1;\n                _this.refSubject.complete();\n            });\n        };\n    /**\n     * @return {?}\n     */\n    StockChart.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.ref) {\n                this.options = this.ref.options;\n                this.ref.destroy();\n                this.ref = undefined;\n                // new init subject\n                this.refSubject = new AsyncSubject();\n                this.ref$ = this.refSubject.asObservable();\n            }\n        };\n    return StockChart;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ChartDirective = /** @class */ /*@__PURE__*/ (function () {\n    function ChartDirective(el) {\n        this.el = el;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ChartDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (!changes[\"chart\"].isFirstChange()) {\n                this.destroy();\n                this.init();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ChartDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.init();\n        };\n    /**\n     * @return {?}\n     */\n    ChartDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.destroy();\n        };\n    /**\n     * @return {?}\n     */\n    ChartDirective.prototype.init = /**\n     * @return {?}\n     */\n        function () {\n            if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart) {\n                this.chart.init(this.el);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ChartDirective.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart) {\n                this.chart.destroy();\n            }\n        };\n    return ChartDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ HIGHCHARTS_MODULES = new InjectionToken('HighchartsModules');\nvar ChartService = /** @class */ /*@__PURE__*/ (function () {\n    function ChartService(chartModules) {\n        this.chartModules = chartModules;\n    }\n    /**\n     * @return {?}\n     */\n    ChartService.prototype.initModules = /**\n     * @return {?}\n     */\n        function () {\n            this.chartModules.forEach(function (chartModule) {\n                chartModule(Highcharts);\n            });\n        };\n    return ChartService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ɵ0 = [];\nvar ChartModule = /** @class */ /*@__PURE__*/ (function () {\n    function ChartModule(cs) {\n        this.cs = cs;\n        this.cs.initModules();\n    }\n    return ChartModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { ChartModule, HIGHCHARTS_MODULES, Chart, StockChart, MapChart, ChartDirective as ɵb, ChartService as ɵa };\n",null]}