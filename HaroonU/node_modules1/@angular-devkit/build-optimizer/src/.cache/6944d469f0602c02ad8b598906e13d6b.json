{"remainingRequest":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\ngx-modal-dialog\\src\\modal-dialog.service.js","dependencies":[{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\ngx-modal-dialog\\src\\modal-dialog.service.js","mtime":1528883083000},{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539413788549},{"path":"G:\\Logix\\Information Architect\\wahid\\HaroonU\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { ComponentFactoryResolver, Inject } from '@angular/core';\nimport { ModalDialogComponent } from './modal-dialog.component';\nimport { ModalDialogInstanceService } from './modal-dialog-instance.service';\nvar ModalDialogService = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * CTOR\n     * @param componentFactoryResolver\n     * @param modalDialogInstanceService\n     */\n    function ModalDialogService(componentFactoryResolver, modalDialogInstanceService) {\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.modalDialogInstanceService = modalDialogInstanceService;\n    }\n    /**\n     * Open dialog in given target element with given options\n     * @param  {ViewContainerRef} target\n     * @param  {IModalDialogOptions} options?\n     */\n    ModalDialogService.prototype.openDialog = function (target, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        if (!options.placeOnTop) {\n            this.modalDialogInstanceService.closeAnyExistingModalDialog();\n        }\n        var factory = this.componentFactoryResolver.resolveComponentFactory(ModalDialogComponent);\n        var componentRef = target.createComponent(factory);\n        componentRef.instance.dialogInit(componentRef, options);\n        this.modalDialogInstanceService.saveExistingModalDialog(componentRef);\n    };\n    return ModalDialogService;\n}());\nexport { ModalDialogService };\n",null]}